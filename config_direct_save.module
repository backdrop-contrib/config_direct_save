<?php

/**
 * Implements hook_menu().
 */
function config_direct_save_menu() {
  $items = [];

  $items['admin/config/development/configuration/update'] = [
    'title' => 'Update',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['config_direct_save_update_configuration_form'],
    'access callback' => 'user_access',
    'access arguments' => ['administer site configuration'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  ];

  return $items;
}

/**
 * Build the update configuration form.
 */
function config_direct_save_update_configuration_form($form, &$form_state) {
  // Display "Staging" as the only option for consistency.
  $form['config_directory'] = [
    '#type' => 'select',
    '#title' => t('Config source'),
    '#description' => t('Select config source directory'),
    '#options' => ['staging' => t('Staging')],
    '#default_value' => 'staging',
    '#disabled' => TRUE, // Makes the field non-editable.
  ];

  $form['backup'] = [
    '#type' => 'checkbox',
    '#title' => t('Backup'),
    '#description' => t('Check to make a backup of the staging configuration.'),
  ];

  $form['update'] = [
    '#type' => 'submit',
    '#value' => t('Export active configuration to staging'),
  ];

  return $form;
}

/**
 * Form submission handler for exporting configuration.
 */
function config_direct_save_update_configuration_form_submit($form, &$form_state) {
  $backup = !empty($form_state['values']['backup']);
  config_direct_save_export_to_staging($backup);
}

/**
 * Exports configuration from active to staging, with optional filesystem backup.
 *
 * @param bool $backup
 *   Whether to create a backup of the staging configuration.
 */
function config_direct_save_export_to_staging($backup) {
  $active_storage = config_get_config_storage('active');
  $staging_storage = config_get_config_storage('staging');
  $config_names = config_get_names_with_prefix('');

  // Backup in the root config directory if selected.
  if ($backup) {
    $config_root_directory = dirname(config_get_config_directory('active'));
    $backup_directory = $config_root_directory . '/backup_' . date('Ymd_His');
    mkdir($backup_directory, 0775, TRUE);

    $backup_storage = new ConfigFileStorage($backup_directory);
    foreach ($config_names as $config_name) {
      $staging_data = $staging_storage->read($config_name);
      if ($staging_data) {
        $backup_storage->write($config_name, $staging_data);
      }
    }
    watchdog('config_direct_save', 'Backup completed in directory %directory', ['%directory' => $backup_directory], WATCHDOG_INFO);
  }

  // Clear existing staging configurations.
  if ($staging_storage instanceof ConfigFileStorage) {
    $staging_directory = config_get_config_directory('staging');
    config_direct_save_clear_directory($staging_directory);
  }
  elseif ($staging_storage instanceof ConfigDatabaseStorage) {
    db_delete('config')->condition('collection', 'staging')->execute();
    watchdog('config_direct_save', 'Cleared staging configuration from the database.', [], WATCHDOG_INFO);
  }
  else {
    backdrop_set_message(t('Unsupported staging storage type. Clearing staging configuration was skipped.'), 'error');
    return;
  }

  // Export each configuration item from active to staging.
  foreach ($config_names as $config_name) {
    $config_data = $active_storage->read($config_name);
    if ($config_data) {
      $staging_storage->write($config_name, $config_data);
    }
  }

  backdrop_set_message(t('The active configuration has been exported to the staging configuration.'));
}

/**
 * Helper function to clear all files in a directory.
 *
 * @param string $directory
 *   The path to the directory to clear.
 */
function config_direct_save_clear_directory($directory) {
  foreach (scandir($directory) as $file) {
    if ($file != '.' && $file != '..') {
      $file_path = "$directory/$file";
      if (is_dir($file_path)) {
        config_direct_save_clear_directory($file_path);
        rmdir($file_path);
      } else {
        unlink($file_path);
      }
    }
  }
}

/**
 * Helper function to get the configuration storage object.
 *
 * @param string $type
 *   The type of configuration storage, either 'active' or 'staging'.
 *
 * @return object
 *   The configuration storage object, either ConfigDatabaseStorage or ConfigFileStorage.
 */
function config_direct_save_get_storage($type) {
  // Use Backdropâ€™s built-in function to retrieve the correct storage object.
  $storage = config_get_config_storage($type);

  // Log which storage class is being used for debugging.
  $class_name = get_class($storage);
  watchdog('config_direct_save', "Using $class_name for $type storage.", [], WATCHDOG_DEBUG);

  return $storage;
}

/**
 * Recursively copy directory contents for backup.
 *
 * @param string $src
 *   The source directory path.
 * @param string $dst
 *   The destination directory path.
 */
function config_direct_save_recurse_copy($src, $dst) {
  if (!is_dir($dst)) {
    mkdir($dst, 0775, TRUE);
  }
  foreach (scandir($src) as $file) {
    if ($file != '.' && $file != '..') {
      $src_file = "$src/$file";
      $dst_file = "$dst/$file";
      if (is_dir($src_file)) {
        config_direct_save_recurse_copy($src_file, $dst_file);
      } else {
        copy($src_file, $dst_file);
      }
    }
  }
}
